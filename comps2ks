#!/usr/libexec/platform-python
#
# Script that converts a yum comps file into output that can be
# inserted into the %packages section of a kickstart script. By
# default it only prints groups (sans language groups) and commented
# optional packages. Options are provided to print the mandatory or
# default packages.
#
# I borrowed from yum-groups-manager to understand how dnf.comps worked.
#
# Written by Gilberto Miralla-Flores <gmiralla@kennesaw.edu>
# Last updated: 2022-10-25

import os
import sys
import gzip
import optparse
import dnf.comps

def print_err(*args):
    sys.stderr.write(' '.join(map(str,args)) + '\n')
    sys.stderr.flush()

def setup_opts():
    parser = optparse.OptionParser(usage="%prog [OPTS...] FILE", version="0.0.2")
    parser.add_option("-e", "--exclude", action="append", default=[], dest="exclude", help="exclude groups")
    parser.add_option("-d", "--defaults", action="store_true", default=False, dest="defaults", help="show packages installed by default")
    return parser

def main():
    # Parse the application options
    parser = setup_opts()
    (opts, args) = parser.parse_args()
    
    # Make sure we got the file argument
    fname = None
    if len(args) < 1:
        print_err("Error: no file provided")
        sys.exit(1)
    else:
        fname = args[0]
    
    # Create the comps object and read in the file
    comps = dnf.comps.Comps()
    try:
        if not os.path.exists(fname):
            print_err("File not found: %s" % fname)
            sys.exit(1)
        if fname.endswith('.gz'):
            fname = gzip.open(fname)
        comps._add_from_xml_filename(fn=fname)
    except IOError as e:
        print_err("Error: couldn't open %s" % fname)
        sys.exit(1)
    
    # Add 'conflicts' and 'everything' to the
    # list of excluded groups
    opts.exclude.append("conflicts")
    opts.exclude.append("everything")
    
    # Get all the groups in the comps file and sort it
    groups = comps.groups_by_pattern(pattern='*', case_sensitive=False)
    groups = sorted(groups, key=lambda x: x.name)
    
    # Loop through all the groups
    for group in groups:
       
        # Skip any groups that have been
        # explicitly excluded
        if group.id in opts.exclude:
            continue
        
        # Print the group id
        print("@" + str(group.id))
        
        # Print mandatory and default packages if the
        # option was specified
        if opts.defaults:
            for mp in group.mandatory_packages:
                print(str(mp))
            for dp in group.default_packages:
                print(str(dp))
        
        # Print the optional packages
        for op in group.optional_packages:
            print("#" + str(op))

# Run the main function if being run as a script
if __name__ == "__main__":
    main()
